#include <WiFi.h>
#include <HTTPClient.h>
#include <Wire.h>
#include <SparkFun_APDS9960.h>
#include <ArduinoJson.h>

// WiFi Credentials
#define WIFI_SSID "YOUR_WIFI_SSID"
#define WIFI_PASSWORD "YOUR_WIFI_PASSWORD"

// Local Server URL (replace with your computer's IP)
#define SERVER_URL "http://192.168.1.100:3000/api/wheelchair/update"
#define GESTURE_URL "http://192.168.1.100:3000/api/wheelchair/gesture"

// Pin Definitions
#define UART_RX_PIN 16
#define UART_TX_PIN 17
#define I2C_SDA_PIN 21
#define I2C_SCL_PIN 22

// UART Configuration
#define UART_BAUD 9600
#define DEBUG_BAUD 115200

// Gesture debounce
#define GESTURE_DEBOUNCE_MS 200

// Distance calculation
#define FORWARD_SPEED_CM_PER_SEC 30.0
#define BACKWARD_SPEED_CM_PER_SEC 25.0
#define ROTATION_DISTANCE_CM 10.0

SparkFun_APDS9960 apds = SparkFun_APDS9960();
HardwareSerial GestureSerial(1);

// State variables
bool isTouchActive = false;
bool isMoving = false;
bool isTiltMode = false;
String currentDirection = "STOPPED";

unsigned long lastGestureTime = 0;
unsigned long sendDataPrevMillis = 0;
unsigned long travelStartTime = 0;
unsigned long distanceUpdateTime = 0;

float totalDistanceCM = 0.0;
float sessionDistanceCM = 0.0;

int gestureCount = 0;
int upCount = 0, downCount = 0, leftCount = 0, rightCount = 0;

void setup() {
  Serial.begin(DEBUG_BAUD);
  delay(100);
  
  GestureSerial.begin(UART_BAUD, SERIAL_8N1, UART_RX_PIN, UART_TX_PIN);
  Wire.begin(I2C_SDA_PIN, I2C_SCL_PIN);

  Serial.println("\n=== Wheelchair-X Local Database ===");

  connectWiFi();

  if (!apds.init()) {
    Serial.println("‚ùå APDS-9960 Initialization Failed!");
    while (1) delay(1000);
  }

  if (!apds.enableGestureSensor(false)) {
    Serial.println("‚ùå Failed to enable gesture sensor!");
    while (1) delay(1000);
  }

  Serial.println("‚úÖ APDS-9960 Initialized!");
  Serial.println("‚úÖ Waiting for Arduino data...\n");
  
  travelStartTime = millis();
  distanceUpdateTime = millis();
}

void loop() {
  readArduinoStatus();
  handleGestures();
  updateDistanceAndTime();

  if (millis() - sendDataPrevMillis > 1000) {  // Send every 1 second
    sendDataPrevMillis = millis();
    sendDataToServer();
  }

  delay(10);
}

void connectWiFi() {
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi");
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    Serial.print(".");
    delay(500);
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úÖ WiFi Connected!");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\n‚ùå WiFi Connection Failed!");
  }
}

void readArduinoStatus() {
  if (GestureSerial.available() > 0) {
    String data = GestureSerial.readStringUntil('\n');
    data.trim();
    
    if (data.length() > 0) {
      parseArduinoData(data);
    }
  }
}

void parseArduinoData(String data) {
  int touchIdx = data.indexOf("TOUCH:");
  if (touchIdx != -1) {
    isTouchActive = (data.substring(touchIdx + 6, touchIdx + 7).toInt() == 1);
  }
  
  int dirIdx = data.indexOf("DIR:");
  if (dirIdx != -1) {
    int commaIdx = data.indexOf(",", dirIdx);
    if (commaIdx != -1) {
      currentDirection = data.substring(dirIdx + 4, commaIdx);
    }
  }
  
  int movingIdx = data.indexOf("MOVING:");
  if (movingIdx != -1) {
    isMoving = (data.substring(movingIdx + 7, movingIdx + 8).toInt() == 1);
  }
  
  int tiltIdx = data.indexOf("TILT:");
  if (tiltIdx != -1) {
    isTiltMode = (data.substring(tiltIdx + 5).toInt() == 1);
  }
}

void handleGestures() {
  if (apds.isGestureAvailable()) {
    unsigned long currentTime = millis();
    if (currentTime - lastGestureTime < GESTURE_DEBOUNCE_MS) return;
    
    lastGestureTime = currentTime;
    int gesture = apds.readGesture();
    
    if (gesture == DIR_NONE || gesture < 0) return;

    gestureCount++;
    GestureSerial.println(gesture);

    String gestureName = "";
    switch (gesture) {
      case DIR_UP:
        upCount++;
        gestureName = "FORWARD";
        break;
      case DIR_DOWN:
        downCount++;
        gestureName = "BACKWARD";
        break;
      case DIR_LEFT:
        leftCount++;
        gestureName = "LEFT";
        break;
      case DIR_RIGHT:
        rightCount++;
        gestureName = "RIGHT";
        break;
    }

    if (gestureName != "") {
      sendGestureData(gestureName);
    }
  }
}

void updateDistanceAndTime() {
  unsigned long currentTime = millis();
  
  if (isMoving) {
    unsigned long timeSinceUpdate = currentTime - distanceUpdateTime;
    float distanceIncrement = 0.0;
    
    if (currentDirection == "FORWARD") {
      distanceIncrement = (FORWARD_SPEED_CM_PER_SEC * timeSinceUpdate) / 1000.0;
    } else if (currentDirection == "BACKWARD") {
      distanceIncrement = (BACKWARD_SPEED_CM_PER_SEC * timeSinceUpdate) / 1000.0;
    } else if (currentDirection == "LEFT" || currentDirection == "RIGHT") {
      distanceIncrement = ROTATION_DISTANCE_CM;
    }
    
    totalDistanceCM += distanceIncrement;
    sessionDistanceCM += distanceIncrement;
  }
  
  distanceUpdateTime = currentTime;
}

void sendDataToServer() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(SERVER_URL);
    http.addHeader("Content-Type", "application/json");

    // Create JSON document
    StaticJsonDocument<512> doc;
    doc["touchActive"] = isTouchActive;
    doc["currentDirection"] = currentDirection;
    doc["isMoving"] = isMoving;
    doc["tiltMode"] = isTiltMode;
    doc["totalDistanceMeters"] = totalDistanceCM / 100.0;
    doc["totalDistanceKm"] = totalDistanceCM / 100000.0;
    doc["sessionDistanceMeters"] = sessionDistanceCM / 100.0;
    
    unsigned long totalSeconds = (millis() - travelStartTime) / 1000;
    doc["totalTimeSeconds"] = totalSeconds;
    doc["timeHours"] = totalSeconds / 3600;
    doc["timeMinutes"] = (totalSeconds % 3600) / 60;
    doc["timeSeconds"] = totalSeconds % 60;
    doc["wifiStrength"] = WiFi.RSSI();

    String jsonString;
    serializeJson(doc, jsonString);

    int httpResponseCode = http.POST(jsonString);
    
    if (httpResponseCode > 0) {
      Serial.println("üì§ Data sent to server");
    } else {
      Serial.print("‚ùå Error: ");
      Serial.println(httpResponseCode);
    }
    
    http.end();
  }
}

void sendGestureData(String gestureName) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(GESTURE_URL);
    http.addHeader("Content-Type", "application/json");

    StaticJsonDocument<256> doc;
    doc["totalGestures"] = gestureCount;
    doc["upCount"] = upCount;
    doc["downCount"] = downCount;
    doc["leftCount"] = leftCount;
    doc["rightCount"] = rightCount;
    doc["lastGesture"] = gestureName;

    String jsonString;
    serializeJson(doc, jsonString);

    http.POST(jsonString);
    http.end();
  }
}